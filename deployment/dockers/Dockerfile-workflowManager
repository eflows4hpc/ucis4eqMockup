###############################################################################
###########################    BUILD STAGE     ################################
###############################################################################

# Obtain a clean Ubuntu distribution
FROM eflows/ucis4eq/base:latest AS build

# Expose the Flask application port
EXPOSE 5001

# Install dependencies
RUN apt-get update && apt-get install -y lzma
RUN pip install webdavclient3

# Install Dask
# TODO: Experimental
#RUN python -m pip install "dask[complete]"

# Install PyCompss
# ... dependencies
RUN apt-get update && apt-get install -y openjdk-8-jdk graphviz xdg-utils \
    libtool automake build-essential python python-dev libpython2.7 python3 \
    python3-dev libboost-serialization-dev libboost-iostreams-dev  libxml2 \
    libxml2-dev csh gfortran libgmp3-dev flex bison texinfo python3-pip \
    libpapi-dev unzip uuid-runtime gawk && \
    gawk -i inplace 'NR==4{print "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/"}1' ~/.bashrc

# ... Gradle    
RUN wget -nv https://services.gradle.org/distributions/gradle-5.4.1-bin.zip -O /opt/gradle-5.4.1-bin.zip; \
    unzip /opt/gradle-5.4.1-bin.zip -d /opt; \
    echo 'export GRADLE_HOME=/opt/gradle-5.4.1' >> ~/.bashrc; \
    echo 'export PATH=/opt/gradle-5.4.1/bin:$PATH' >> ~/.bashrc

# ... PyCompss
RUN apt-get update && apt-get install -y git; \
    export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/; \
    export GRADLE_HOME=/opt/gradle-5.4.1; \
    export PATH=/opt/gradle-5.4.1/bin:$PATH; \
    pip install maven

# ... and COMPSs
RUN wget http://compss.bsc.es/repo/sc/stable/COMPSs_3.0.tar.gz; \
    tar -xvzf COMPSs_3.0.tar.gz;\
    cd COMPSs;\
    export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/;\
    ./install /opt/COMPSs/;\
    cd ..;\
    rm -r COMPSs;\
    rm COMPSs_*.tar.gz;\
    echo 'source /opt/COMPSs/compssenv' >> ~/.bashrc;\
    echo 'export PYTHONPATH=$PYTHONPATH:/opt/COMPSs/Bindings/python/3/pycompss-3.0-py3.8-linux-x86_64.egg/' >> ~/.bashrc ;\
    ln -s /opt/COMPSs/Bindings/python/3/pycompss-3.0-py3.8-linux-x86_64.egg/pycompss /opt/COMPSs/Bindings/python/3/pycompss

# ... Install dill (for COMPSs)
RUN pip install dill

# Obtain the EQ Temporal Workflow Manager Emulator
ADD code/services/workflowManagerService.py /root/services/workflowManagerService.py

ENV PYTHONPATH=$PYTHONPATH:/opt/COMPSs/Bindings/python/3/pycompss-3.0-py3.8-linux-x86_64.egg/

# Prepare an script able to start the service
#RUN echo "/opt/COMPSs/Runtime/scripts/user/runcompss /root/services/workflowManagerService.py" >> /root/services/start.sh
#RUN echo "/usr/local/lib/python3.8/site-packages/pycompss/COMPSs/Runtime/scripts/user/runcompss --graph=true --log_level=info -d --project=/opt/project.xml --resources=/opt/resources.xml /root/services/workflowManagerService.py" >> /root/services/start.sh
RUN echo "/opt/COMPSs/Runtime/scripts/user/runcompss --graph=true --log_level=info -d --project=/opt/project.xml --resources=/opt/resources.xml /root/services/workflowManagerService.py" >> /root/services/start.sh

#RUN echo "/usr/local/lib/python3.8/site-packages/pycompss/COMPSs/Runtime/scripts/user/runcompss --graph=true --log_level=info -d /root/services/workflowManagerService.py" >> /root/services/start.sh

ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/

# Entry point
ENTRYPOINT ["sh", "/root/services/start.sh"]
